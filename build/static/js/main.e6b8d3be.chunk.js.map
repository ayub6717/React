{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","state","posts","axios","get","then","Response","setState","data","catch","error","console","log","this","length","style","textAlign","className","map","post","key","id","name","native","phone","continent","capital","currency","languages","emoji","emojiU","code","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8SAmLeA,E,2MA9CbC,MAAQ,CACNC,MAAQ,I,mFAGU,IAAD,OACjBC,IAAMC,IAAI,oDACTC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZL,MAAOI,EAASE,UAGnBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAErB,IAEAR,EAASW,KAAKZ,MAAdC,MAEL,OAAkB,GAAdA,EAAMY,OACD,wBAAIC,MAAO,CAACC,UAAW,WAAvB,cAGL,yBAAKC,UAAU,aAAf,IAA4B,6BAC1B,wBAAIA,UAAU,cACZ,8CAAmB,4CACjBf,EAAMgB,KAAI,SAAAC,GAAI,OACd,wBACEC,IAAOD,EAAKE,GACZJ,UAAU,2BACV,yCAAeE,EAAKG,KAApB,KACA,yCAAeH,EAAKI,OAApB,KACA,sCAAYJ,EAAKK,OACjB,4CAAkBL,EAAKM,WACvB,yCAAeN,EAAKO,QAApB,KACA,2CAAiBP,EAAKQ,SAAtB,KACA,4CAAkBR,EAAKS,UAAvB,KACA,yCAAeT,EAAKU,MAApB,IAA2B,8BAC3B,yCAAeV,EAAKW,OAApB,IAA4B,6BAA5B,KACA,uCAAaX,EAAKY,KAAlB,IAAwB,wC,GAvCxBC,aCvHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.e6b8d3be.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\nimport axios from 'axios'\n// import Books from './Books/Books'\n// import Book from \"./Bookss/Book/Book\";\n// import First from './First/First'\n// import Stateless from './Stateless'\n\n// class App extends Component {\n\n//   state = {\n//     persons: [\n//       { name: \"Md.Rohan\", email: \"rohan@gmail.com\", address: \"Dhanmondi\" },\n//       { name: \"Md.Mehedi\", email: \"mehedi@gmail.com\", address: \"Lalmohan\" },\n//       { name: \"Md.Tanzil\", email: \"tanzil@gmail.com\", address: \"Naraynganj\" },\n//       { name: \"Md.Tanzil\", email: \"tanzil@gmail.com\", address: \"Naraynganj\" },\n//       { name: \"Md.Sagor\", email: \"sagor@gmail.com\", address: \"Mirpur\" }\n//     ]\n//   }\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         {\n//           this.state.persons.map((people, index) => {\n//             return < First\n//               key={index}\n//               name={people.name}\n//               email={people.email}\n//               address={people.address} />\n//           })\n//         }\n//       </div>\n//     );\n//   }\n// }\n\n\n// class App extends Component{\n\n//   state={\n//     name: ''\n//   }\n\n//   inputHandeler = (event) =>{\n\n//     this.setState({\n//       name: event.target.value\n//     })\n//   }\n\n\n//   render(){\n//     return(\n//       <div className=\"App\">\n//         <input onChange={this.inputHandeler} value={this.state.name} type=\"text\" placeholder=\"Enter Your Name...\"/>\n//         <button onClick={(event) => console.log(event) }>\n//           click\n//         </button>\n\n//         {this.state.name ? <p>hello mr. {this.state.name} </p> : '' }\n\n//         <Stateless name=\"Rohan\" />\n//       </div>\n//     );\n//   }\n// }\n\n// class App extends Component {\n\n//   state = {\n//     books: [\n//       {\n//         name: \"cooked book\",\n//         price: 190,\n//         id: 1\n//       },\n//       {\n//         name: \"Works book\",\n//         price: 340,\n//         id: 2\n//       },\n//       {\n//         name: \"poem book\",\n//         price: 640,\n//         id: 3\n//       },\n//       {\n//         name: \"Leadership book\",\n//         price: 240,\n//         id: 4\n//       }\n\n//     ]\n//   }\n\n//   deleteHandler = (id) => {\n//     let newBooks= this.state.books.filter(book=> book.id != id)\n//     this.setState({\n//       books: newBooks\n//     })\n//   }\n\n//   changeHandler = (name,id) => {\n//     let newBooks= this.state.books.map(book => {\n//       if(id==book.id ) {\n//         return {\n//           ...book,\n//              name\n//         };\n//       }\n\n//       return book;\n//     });\n\n//     this.setState({\n//       books: newBooks\n//     });\n//   };\n//   render() {\n//     return (\n//       <div className='App'>\n//         <Books \n//           changeHandler={this.changeHandler.bind(this)} \n//           deleteHandler={ this.deleteHandler.bind(this) } \n//           books={this.state.books} />\n//       </div>\n//     );\n//   }\n// }\n\n\nclass App extends Component {\n\n  state = {\n    posts : []\n  }\n\n  componentDidMount(){\n    axios.get('http://countriesnode.herokuapp.com/v1/countries/')\n    .then(Response => {\n      this.setState({\n        posts: Response.data\n      })\n    })\n    .catch(error => console.log(error ))\n  }\n  render(){\n\n      let {posts} = this.state\n\n      if (posts.length==0){\n        return <h1 style={{textAlign: 'center' }}>Looding...</h1>\n      }else{\n        return (\n          <div className=\"container\"> <br/>\n            <ul className=\"list-group\">\n              <h2>Information Of <span>Countries</span></h2>\n              { posts.map(post => \n                <li \n                  key ={ post.id } \n                  className=\"list-group-item country\"> \n                  <h3>Country : {post.name} </h3>  \n                  <h6> Native : {post.native} </h6>\n                  <p>Phone : {post.phone}</p>\n                  <h6> Continent : {post.continent}</h6>\n                  <p> Capital : {post.capital} </p>\n                  <h6> Currency : {post.currency} </h6>\n                  <p>  Languages : {post.languages} </p>\n                  <h6>  Emoji : {post.emoji} <br/></h6>\n                  <p>  EmojiU : {post.emojiU} <br/> </p>\n                  <h6> Code : {post.code} <br/></h6>\n                </li> ) } \n            </ul>\n          </div>\n        )\n      }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}